@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Http
@using System.Globalization
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="language-selector">
    <label for="languageDropdown">🌍</label>
    <!-- O binding é feito na propriedade 'CurrentCulture' -->
    <select id="languageDropdown" @bind="CurrentCulture">
        <option value="pt-BR">Português (Brasil)</option>
        <option value="en-US">English (US)</option>
        <option value="it-IT">Italiano</option>
    </select>
</div>

@code {
    // Valor interno
    private string currentCulture = CultureInfo.CurrentCulture.Name;

    /// <summary>
    /// Propriedade usada para binding. Quando alterada, dispara a mudança de cultura.
    /// </summary>
    private string CurrentCulture
    {
        get => currentCulture;
        set
        {
            if (currentCulture != value)
            {
                currentCulture = value;
                // Chama o método assíncrono sem esperar o resultado
                _ = OnCultureChange(value);
            }
        }
    }

    /// <summary>
    /// Atualiza a cultura, define o cookie e força o reload da página.
    /// </summary>
    /// <param name="newCulture">A nova cultura selecionada.</param>
    private async Task OnCultureChange(string newCulture)
    {
        if (!string.IsNullOrEmpty(newCulture))
        {
            var culture = new CultureInfo(newCulture);

            // Atualiza a cultura atual na thread
            CultureInfo.DefaultThreadCurrentCulture = culture;
            CultureInfo.DefaultThreadCurrentUICulture = culture;

            // Cria o cookie no formato esperado pelo middleware
            var requestCulture = new RequestCulture(newCulture);
            var cultureCookieValue = CookieRequestCultureProvider.MakeCookieValue(requestCulture);

            // Define o cookie via JavaScript
            await JS.InvokeVoidAsync("eval", $"document.cookie = '.AspNetCore.Culture={cultureCookieValue};path=/'");

            // Opcional: atualizar também no localStorage se necessário
            await JS.InvokeVoidAsync("localStorage.setItem", "blazorCulture", newCulture);

            // Força o reload completo da página
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
}
